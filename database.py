# database.py
import sqlite3
from datetime import date

DB_NAME = 'car_data.db'

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–ø—Ä–∞–≤–∫–∞—Ö
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS fuel_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                log_date DATE NOT NULL,
                odometer INTEGER NOT NULL,
                liters REAL NOT NULL,
                price_per_liter REAL NOT NULL,
                total_cost REAL NOT NULL
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–º–µ–Ω–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS parts_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_name TEXT NOT NULL,
                replacement_date DATE NOT NULL,
                replacement_odometer INTEGER NOT NULL,
                price REAL NOT NULL,
                lifespan_km INTEGER,
                notes TEXT
            )
        ''')
        conn.commit()

def add_fuel_record(odometer, liters, price_per_liter):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–∞–≤–∫–µ –≤ –ë–î."""
    total_cost = round(liters * price_per_liter, 2)
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO fuel_log (log_date, odometer, liters, price_per_liter, total_cost) VALUES (?, ?, ?, ?, ?)',
            (date.today(), odometer, liters, price_per_liter, total_cost)
        )
        conn.commit()
    return total_cost

def add_part_record(part_name, odometer, price, lifespan_km=None, notes=''):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –∑–∞–º–µ–Ω–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –ë–î."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO parts_log (part_name, replacement_date, replacement_odometer, price, lifespan_km, notes) VALUES (?, ?, ?, ?, ?, ?)',
            (part_name, date.today(), odometer, price, lifespan_km, notes)
        )
        conn.commit()

def get_latest_odometer():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT MAX(odometer) FROM fuel_log')
        last_fuel_odo = cursor.fetchone()[0] or 0
        cursor.execute('SELECT MAX(replacement_odometer) FROM parts_log')
        last_part_odo = cursor.fetchone()[0] or 0
        return max(last_fuel_odo, last_part_odo)

def get_reminders(current_odometer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ—Ä–∞ –º–µ–Ω—è—Ç—å."""
    reminders = []
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–º–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∑–∞–ø—á–∞—Å—Ç–∏, —É –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å
        cursor.execute('''
            SELECT part_name, MAX(replacement_odometer), lifespan_km 
            FROM parts_log 
            WHERE lifespan_km IS NOT NULL 
            GROUP BY part_name
        ''')
        parts = cursor.fetchall()

        for part_name, last_odo, lifespan in parts:
            km_since_replacement = current_odometer - last_odo
            if km_since_replacement >= lifespan:
                reminders.append(f"üî¥ –°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨: '{part_name}'. –ü—Ä–æ–±–µ–≥ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã: {km_since_replacement} –∫–º (—Ä–µ—Å—É—Ä—Å {lifespan} –∫–º).")
            elif lifespan - km_since_replacement <= 2000: # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2000 –∫–º –¥–æ –∑–∞–º–µ–Ω—ã
                 reminders.append(f"üü° –°–ö–û–†–û –ó–ê–ú–ï–ù–ê: '{part_name}'. –û—Å—Ç–∞–ª–æ—Å—å {lifespan - km_since_replacement} –∫–º –¥–æ –ø–ª–∞–Ω–æ–≤–æ–π –∑–∞–º–µ–Ω—ã.")
    return reminders

def get_full_analysis():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ç—Ä–∞—Ç–∞–º."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT SUM(total_cost) FROM fuel_log')
        total_fuel_cost = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(price) FROM parts_log')
        total_parts_cost = cursor.fetchone()[0] or 0
        
        total_cost = total_fuel_cost + total_parts_cost
        
        return {
            "total_fuel": round(total_fuel_cost, 2),
            "total_parts": round(total_parts_cost, 2),
            "grand_total": round(total_cost, 2),
        }