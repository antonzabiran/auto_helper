# main.py
import database
import fuel_parser
import os

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏."""
    os.system('cls' if os.name == 'nt' else 'clear')

def get_float_input(prompt):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏."""
    while True:
        try:
            return float(input(prompt).replace(',', '.'))
        except ValueError:
            print("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def get_int_input(prompt):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏."""
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

def handle_add_fuel():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—Ä–∞–≤–∫–µ."""
    clear_screen()
    print("--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—Ä–∞–≤–∫–µ ---")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    prices = fuel_parser.get_belarus_fuel_prices()
    selected_price = 0

    if prices:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:")
        fuel_options = list(prices.keys())
        for i, fuel in enumerate(fuel_options):
            print(f"{i + 1}. {fuel} - {prices[fuel]} BYN")
        print("0. –í–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é")
        
        choice = get_int_input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
        if 0 < choice <= len(fuel_options):
            selected_price = float(prices[fuel_options[choice - 1]])
    
    if selected_price == 0:
        selected_price = get_float_input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä: ")

    last_odo = database.get_latest_odometer()
    print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥: {last_odo} –∫–º")
    odometer = get_int_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ (–∫–º): ")
    liters = get_float_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤: ")
    
    total_cost = database.add_fuel_record(odometer, liters, selected_price)
    print(f"\n‚úÖ –ó–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–∞–≤–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°—É–º–º–∞: {total_cost} BYN")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")

def handle_add_part():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–º–µ–Ω–µ –∑–∞–ø—á–∞—Å—Ç–∏."""
    clear_screen()
    print("--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–º–µ–Ω–µ –∑–∞–ø—á–∞—Å—Ç–∏ ---")
    
    part_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–∞—Å–ª–æ –î–í–°' –∏–ª–∏ '–§–∏–ª—å—Ç—Ä –≤–æ–∑–¥—É—à–Ω—ã–π'): ")
    last_odo = database.get_latest_odometer()
    print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥: {last_odo} –∫–º")
    odometer = get_int_input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–º–µ–Ω—ã: ")
    price = get_float_input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ (–∏ —Ä–∞–±–æ—Ç—ã): ")
    
    lifespan_str = input("–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –∫–º (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç): ")
    lifespan = int(lifespan_str) if lifespan_str.isdigit() else None
    
    notes = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ")

    database.add_part_record(part_name, odometer, price, lifespan, notes)
    print(f"\n‚úÖ –ó–∞–ø–∏—Å—å –æ –∑–∞–º–µ–Ω–µ '{part_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")

def handle_reminders():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ."""
    clear_screen()
    print("--- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ –∑–∞–ø—á–∞—Å—Ç–µ–π ---")
    
    last_odo = database.get_latest_odometer()
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥: {last_odo} –∫–º")
    current_odometer = get_int_input("–í–≤–µ–¥–∏—Ç–µ –¢–ï–ö–£–©–ò–ô –ø—Ä–æ–±–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ")
    
    reminders = database.get_reminders(current_odometer)
    
    if not reminders:
        print("\nüëç –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        print("\n–í–Ω–∏–º–∞–Ω–∏–µ:")
        for r in reminders:
            print(f"- {r}")
            
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")

def handle_analysis():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç."""
    clear_screen()
    print("--- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å ---")
    
    stats = database.get_full_analysis()
    
    print(f"\n‚õΩ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ: {stats['total_fuel']} BYN")
    print(f"üõ†Ô∏è –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç—ã: {stats['total_parts']} BYN")
    print("-" * 30)
    print(f"üí∞ –û–ë–©–ò–ï –ó–ê–¢–†–ê–¢–´: {stats['grand_total']} BYN")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")


def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    database.init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    while True:
        clear_screen()
        print("===== –í–∞—à –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v1.0 =====")
        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥:", database.get_latest_odometer(), "–∫–º")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. ‚õΩ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É (—Å –∞–≤—Ç–æ-—Ü–µ–Ω–æ–π)")
        print("2. üõ†Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É –∑–∞–ø—á–∞—Å—Ç–∏")
        print("3. ‚ùó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ–Ω–µ")
        print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç")
        print("0. üö™ –í—ã—Ö–æ–¥")

        choice = input("\n> ")
        if choice == '1':
            handle_add_fuel()
        elif choice == '2':
            handle_add_part()
        elif choice == '3':
            handle_reminders()
        elif choice == '4':
            handle_analysis()
        elif choice == '0':
            print("–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")


if __name__ == '__main__':
    main_menu()